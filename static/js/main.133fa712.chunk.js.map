{"version":3,"sources":["SortingAlgorithms/SortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","Pathfinder/Node/Node.jsx","Algorithms/Dijkstra.js","Pathfinder/Pathfinder.jsx","NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["mergesort","array","length","animations","auxiliary","slice","mergesortHelper","mainArray","startIndex","endIndex","midIndex","Math","floor","k","i","j","push","merge","maxheapify","size","root","largest","leftchild","rightchild","t","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arraybars","document","getElementsByClassName","bar1","bar2","bar1style","style","bar2style","color","setTimeout","backgroundColor","newheight","height","heapSort","a","bubblesort","newheight1","newheight2","bar1styles","bar2styles","temp","insertionSort","className","map","value","id","key","onClick","mergeSort","bubbleSort","React","Component","Node","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathfindingVisualizer","mouseIsPressed","getInitialGrid","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","animateShortestPath","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","visualizeDijkstra","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","newNode","NavBar","disabled","exact","to","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.133fa712.chunk.js","sourcesContent":["export function mergesort(array) {\r\n  if (array.length <= 1) return array;\r\n  const animations = [];\r\n  const auxiliary = array.slice();\r\n  mergesortHelper(array, 0, array.length - 1, auxiliary, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergesortHelper(\r\n  mainArray,\r\n  startIndex,\r\n  endIndex,\r\n  auxiliary,\r\n  animations,\r\n) {\r\n  if (startIndex === endIndex) return;\r\n  const midIndex = Math.floor((startIndex + endIndex) / 2);\r\n  mergesortHelper(auxiliary, startIndex, midIndex, mainArray, animations);\r\n  mergesortHelper(auxiliary, midIndex + 1, endIndex, mainArray, animations);\r\n  merge(mainArray, startIndex, midIndex, endIndex, auxiliary, animations);\r\n}\r\n\r\nfunction merge(\r\n  mainArray,\r\n  startIndex,\r\n  midIndex,\r\n  endIndex,\r\n  auxiliary,\r\n  animations,\r\n) {\r\n  let k = startIndex;\r\n  let i = startIndex;\r\n  let j = midIndex + 1;\r\n  while (i <= midIndex && j <= endIndex) {\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    if (auxiliary[i] <= auxiliary[j]) {\r\n      animations.push([k, auxiliary[i]]);\r\n      mainArray[k++] = auxiliary[i++];\r\n    } else {\r\n      animations.push([k, auxiliary[j]]);\r\n      mainArray[k++] = auxiliary[j++];\r\n    }\r\n  }\r\n  while (i <= midIndex) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([k, auxiliary[i]]);\r\n    mainArray[k++] = auxiliary[i++];\r\n  }\r\n  while (j <= endIndex) {\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n    animations.push([k, auxiliary[j]]);\r\n    mainArray[k++] = auxiliary[j++];\r\n  }\r\n}\r\n\r\nexport function bubblesort(array) {\r\n  const animations = [];\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = 1; j < array.length - i; j++) {\r\n      animations.push([j - 1, j]);\r\n      animations.push([j - 1, j]);\r\n      if (array[j] < array[j - 1]) {\r\n        animations.push([j - 1, array[j], j, array[j - 1]]);\r\n        let a = array[j - 1];\r\n        array[j - 1] = array[j];\r\n        array[j] = a;\r\n      } else animations.push([j - 1, array[j - 1], j, array[j]]);\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n\r\nexport function insertionSort(array) {\r\n  const animations = [];\r\n  for (let i = 1; i < array.length; i++) {\r\n    let j = i - 1;\r\n    let temp = array[i];\r\n    while (temp < array[j] && j >= 0) {\r\n      array[j + 1] = array[j];\r\n      animations.push([j + 1, j]);\r\n      animations.push([j + 1, j]);\r\n      j--;\r\n    }\r\n\r\n    array[j + 1] = temp;\r\n  }\r\n  return animations;\r\n}\r\n\r\nexport function heapSort(array) {\r\n  const animations = [];\r\n  for (let i = Math.floor(array.length / 2) ; i >= 0; i--)\r\n    maxheapify(array, animations, array.length, i);\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    animations.push([0, i]);\r\n    animations.push([0, i]);\r\n    let t = array[0];\r\n    array[0] = array[i];\r\n    array[i] = t;\r\n    maxheapify(array, animations, i, 0);\r\n  }\r\n  return animations;\r\n}\r\n\r\nfunction maxheapify(array, animations, size, root) {\r\n  let largest = root;\r\n  let leftchild = 2 * root + 1;\r\n  let rightchild = 2 * root + 2;\r\n  if (leftchild < size && array[leftchild] > array[largest])\r\n    largest = leftchild;\r\n  if (rightchild < size && array[rightchild] > array[largest])\r\n    largest = rightchild;\r\n  if (largest !== root) {\r\n    let t = array[root];\r\n    array[root] = array[largest];\r\n    array[largest] = t;\r\n    animations.push([root, largest]);\r\n    animations.push([root, largest]);\r\n    maxheapify(array, animations, size, largest);\r\n  }\r\n}\r\n","import React from 'react';\r\n//import ReactDOM from 'react-dom'\r\nimport './SortingVisualizer.css';\r\nimport {\r\n  mergesort,\r\n  bubblesort,\r\n  insertionSort,\r\n  heapSort,\r\n} from '../SortingAlgorithms/SortingAlgorithms.js';\r\nconst primary_color = 'turquoise';\r\nconst secondary_color = 'tomato';\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < 320; i++) {\r\n      array.push(getRandomArbitrary(5, 610));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = mergesort(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arraybars = document.getElementsByClassName('bars');\r\n      const changecolor = i % 3 !== 2;\r\n      if (changecolor) {\r\n        const [bar1, bar2] = animations[i];\r\n        const bar1style = arraybars[bar1].style;\r\n        const bar2style = arraybars[bar2].style;\r\n        const color = i % 3 === 0 ? secondary_color : primary_color;\r\n        setTimeout(() => {\r\n          bar1style.backgroundColor = color;\r\n          bar2style.backgroundColor = color;\r\n        }, i * 5);\r\n      } else {\r\n        const [bar1, newheight] = animations[i];\r\n        setTimeout(() => {\r\n          const bar1styles = arraybars[bar1].style;\r\n          bar1styles.height = `${newheight}px`;\r\n        }, i * 5);\r\n      }\r\n    }\r\n  }\r\n\r\n  heapSort() {\r\n    const animations = heapSort(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arraybars = document.getElementsByClassName('bars');\r\n      if (i % 2 === 0) {\r\n        const [bar1, bar2] = animations[i];\r\n        const bar1style = arraybars[bar1].style;\r\n        const bar2style = arraybars[bar2].style;\r\n        setTimeout(() => {\r\n          bar1style.backgroundColor = secondary_color;\r\n          bar2style.backgroundColor = secondary_color;\r\n          let t = bar1style.height;\r\n          bar1style.height = bar2style.height;\r\n          bar2style.height = t;\r\n        }, i * 5);\r\n      } else {\r\n        const [bar1, bar2] = animations[i];\r\n        const bar1style = arraybars[bar1].style;\r\n        const bar2style = arraybars[bar2].style;\r\n        setTimeout(() => {\r\n          bar1style.backgroundColor = primary_color;\r\n          bar2style.backgroundColor = primary_color;\r\n        }, i * 5);\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    const animations = bubblesort(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arraybars = document.getElementsByClassName('bars');\r\n      const changecolor = i % 3 !== 2;\r\n      if (changecolor) {\r\n        const [bar1, bar2] = animations[i];\r\n        const bar1style = arraybars[bar1].style;\r\n        const bar2style = arraybars[bar2].style;\r\n        const color = i % 3 === 0 ? secondary_color : primary_color;\r\n        setTimeout(() => {\r\n          bar1style.backgroundColor = color;\r\n          bar2style.backgroundColor = color;\r\n        }, i * 5);\r\n      } else {\r\n        const [bar1, newheight1, bar2, newheight2] = animations[i];\r\n        setTimeout(() => {\r\n          const bar1styles = arraybars[bar1].style;\r\n          const bar2styles = arraybars[bar2].style;\r\n          bar1styles.height = `${newheight1}px`;\r\n          bar2styles.height = `${newheight2}px`;\r\n        }, i * 5);\r\n      }\r\n    }\r\n  }\r\n  insertionSort() {\r\n    const animations = insertionSort(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arraybars = document.getElementsByClassName('bars');\r\n      if (i % 2 === 0) {\r\n        const [bar1, bar2] = animations[i];\r\n        const bar1style = arraybars[bar1].style;\r\n        const bar2style = arraybars[bar2].style;\r\n        setTimeout(() => {\r\n          bar1style.backgroundColor = secondary_color;\r\n          bar2style.backgroundColor = secondary_color;\r\n          let t = bar1style.height;\r\n          bar1style.height = bar2style.height;\r\n          bar2style.height = t;\r\n        }, i * 10);\r\n      } else {\r\n        const [bar1, bar2] = animations[i];\r\n        const bar1style = arraybars[bar1].style;\r\n        const bar2style = arraybars[bar2].style;\r\n        setTimeout(() => {\r\n          bar1style.backgroundColor = primary_color;\r\n          bar2style.backgroundColor = primary_color;\r\n        }, i * 10);\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const {array} = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        {array.map((value, id) => (\r\n          <div\r\n            className=\"bars\"\r\n            key={id}\r\n            style={{\r\n              backgroundColor: primary_color,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n        <div>\r\n          <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n          <text>{'   '}</text>\r\n          <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n          <text>{'   '}</text>\r\n          <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n          <text>{'   '}</text>\r\n          <button onClick={() => this.bubbleSort()}>Bubble Sort </button>\r\n          <text>{'   '}</text>\r\n          <button onClick={() => this.insertionSort()}>Insertion Sort </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      // If we encounter a wall, we skip it.\r\n      if (closestNode.isWall) continue;\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should therefore stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n  \r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  // Backtracks from the finishNode to find the shortest path.\r\n  // Only works when called *after* the dijkstra method above.\r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n  ","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../Algorithms/Dijkstra';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 35;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n        <button onClick={() => this.visualizeDijkstra()}>\r\n          Visualize Dijkstra's Algorithm\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Router } from 'react-router-dom/cjs/react-router-dom.min';\r\nimport './NavBar.css';\r\n\r\n\r\nexport default class NavBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false,\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"nav-bar\">\r\n                    <NavLink exact className=\"nav-link\"  to={!this.state.disabled ? '/' : \"\"}>Pathfinding Algoritms</NavLink>\r\n                    <NavLink exact className=\"nav-link\"  to={!this.state.disabled ? '/sortingvisualizer' : \"\"}>Sorting Algorithms</NavLink>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\nimport PathfindingVisualizer from './Pathfinder/Pathfinder';\r\nimport NavBar from './NavBar';\r\nimport { Route, Switch, BrowserRouter } from  'react-router-dom';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n       <NavBar />\r\n        <Switch>\r\n          <Route exact path = '/' component={PathfindingVisualizer} />\r\n          <Route exact path = '/sortingvisualizer' component={SortingVisualizer} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}